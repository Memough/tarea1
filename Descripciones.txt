Especificaciones del Modelo Diccionario:
Modelo de estructura de datos de modelo tipo diccionario, que almacena datos del tipo string.
Operaciones:
Inserte: inserta un elemento string al diccionario. puede ser repetido
Borre: elimina un elemento del diccionario
Limpie: elimina todos los elementos del diccionario
Miembro: revisa si un elemento ya existe dentro del diccionario
Imprima: imprime los elementos del diccionario

Descripción de la Estructura de Datos Generica Lista Ordenada:
Estructura de datos que almacena elementos de forma seguida, un elemento tras otro, manteniendolos un tipo de orden determinado desde su incersión.

Descripción de la Estructura de Datos Lista Ordenada por punteros simplemente enlazada:
Una lista ordenada implementada de manera dinamica con el uso objetos nodo y referencia apuntando al siguiente elemento en la lista. Incluyendo un nodo de cabeza que se usa como inicio de lista.

Operaciones:
Inserte: se recorre la lista desde la cabeza revisando el siguiente elemento hasta que este este vacio para luego crear un objeto nodo dentro de ese espacio siguiente
Borre: se recorre la lista desde la cabeza comparando los elementos guardados en los nodos con el elemento a eliminar. En caso de que encuentre una igualdad se saca el objeto de la lista, se modifican las "referencias" hacia el siguiente elemento y se reduce su tamaño.
Limpie: se define la cabeza como vacia al igual que la referencia al siguiente nodo y se reduce el tamaño a 0.
Miembro: se recorre la lista desde la cabeza comparando los elementos guardados en los nodos con el elemento a buscar. En caso de que encuentre una igualdad se retorna un valor booleano verdadero.
Imprima: se imprime a si mismo

Descripción de la Estructura de Datos Lista Ordenada por arreglos:
Una lista ordena implementada de manera estatica con el uso de una clase array de tamaño fijo definido en la creacion de la lista.

Operaciones:
Inserte: en caso de que la lista no se encuentre llena se recorre el array em busca de la posicion correspondiente, al encontrarlo se Zesplazan los elementos que esten en dicho espacio en adelante antes de insertarlo en la posicion correspondiente.
Borre: recorre el array comparando cada elemento con el elemento a eliminar. En caso de encontrar una correspondecia se desplazan los elementos siguientes hacia atras sobreescribiendo el valor de paso, además de limpiar la última celda.
Limpie: recorre cada indice del array reemplazando el elemento con un vacio("").
Miembro: recorre el array comparando cada elemento con el elemento a encontrar. En caso de encontrar una igualdad retorna un valor booleano verdadero.
Imprima: se imprime a si mismo

Descripción de la Estructura de Datos genérica Tabla Hash
Estructura de datos que almacena elementos asociandolos con una clave o llave, haciendolo de facil y rapida acceso.

Descripción de la Estructura de Datos Tabla Hash abierta
Tabla hash cuyas celdas estan conformados por listas en vez de un solo espacio, para almacenar varios valores en caso de que dos elementos tengan la misma asignación. Implementados por listas de listas

Operaciones:
Inserte: calcula a cual celda tiene que ser insertado el valor y luego lo añada a la lista de la celda.
Borre: busca en la celda asignada al valor la primer corrrespondencia dentro de la lista y lo elimina en caso de encontrarlo
Limpie: agarra las celdas y las limpia
Miembro: revisa si hay algun elemento en la celda correcta
Imprima: se imprime a si misma

Descripción de la función hash y la evaluación de su “aleatoriedad”
Le hashing agarra la clave y devuelve un entero el cual funciona como el indice donde se almacenará el elemento. El hashing debería de distribuir los elementos de manera que se sienta random aunque solo sea determininista.

Descripción del proceso de redistribución y la evaluación de su tiempo de duración
El rehashing se hace cuando se generan varias colisiones o se llena demasiado la tabla. En en esa caso se debe de rehacer la tabla y recalcular los hashes para reinsertar los elementos.
En cuando a su tiempo se puede considerar O(n) ya que tiene que rehacer la tabla y rehashaer todos los n elementos guardados.

Descripción de la Estructura de Datos Árbol Binario de Búsqueda por punteros:
Estructura de datos dinámica que almacena elementos de tipo string en forma jerárquica, utilizando objetos nodo conectados por referencias a sus hijos izquierdo y derecho.
Cada nodo cumple la propiedad de orden del ABB, los valores menores se almacenan en el subárbol izquierdo y los mayores o iguales en el derecho.
Permite realizar búsquedas, inserciones y eliminaciones de forma eficiente mediante recorridos recursivos.

Operaciones:
Inserte: compara el elemento con el nodo actual, si es menor, se inserta en el hijo izquierdo, si es mayor o igual en el derecho.
Borre: localiza el nodo a eliminar y reorganiza el árbol según el caso nodo hoja, nodo con un hijo o con dos hijos.
Limpie: asigna la raíz como vacía, eliminando todas las referencias a nodos.
Miembro: recorre el árbol desde la raíz comparando valores hasta encontrar el elemento o llegar a un nodo vacío, retornando un valor booleano.
Imprima: realiza un recorrido in-order mostrando los elementos en orden ascendente.

Descripción de la Estructura de Datos Árbol Binario de Búsqueda por vector heap:
Estructura de datos estática que representa el árbol binario dentro de un arreglo.
Cada posición del vector corresponde a un nodo, y sus hijos se calculan con las fórmulas: izquierdo = 2i + 1 y derecho = 2i + 2.
El tamaño del vector se ajusta dinámicamente para permitir nuevas inserciones sin pérdida de datos.
Esta representación evita el uso de punteros, pero conserva la lógica de orden.

Operaciones:
Inserte: recorre el vector de forma recursiva comparando el valor con el nodo actual hasta encontrar una posición vacía y asignar el nuevo elemento.
Borre: elimina el elemento indicado y reconstruye el árbol reinser­tando los valores restantes para mantener la propiedad de orden.
Limpie: vacía completamente el vector, eliminando todos los valores almacenados.
Miembro: busca el elemento recorriendo los índices del vector en función de las fórmulas de los hijos.
Imprima: realiza un recorrido in-order sobre el vector, mostrando los elementos ordenados ascendentemente.
